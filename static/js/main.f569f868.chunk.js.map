{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","date","totalDate","getDate","day","getDay","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4JAGMA,EACG,mCADHA,EAEI,2CAgEKC,MAhDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,KAeX,OACI,yBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAC7E,OACF,8BACI,yBAAKF,UAAU,cACX,2BACIG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAtBL,SAAAC,GACO,UAAdA,EAAMC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,iCAAuDH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UAkBS,oBAAhBlB,EAAQG,KACjB,6BACI,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,YAAYF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,SACvD,yBAAKrB,UAAU,QA9CnB,SAACsB,GACjB,IAIIC,EAAYD,EAAKE,UACjBC,EAHO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,WAAW,UAGpEH,EAAKI,UAChBC,EANS,CAAC,UAAW,WAAY,QAAS,QAAQ,MAAM,OAAQ,OACxD,SAAU,YAAa,UAAW,WAAW,YAKtCL,EAAKM,YACpBC,EAAOP,EAAKQ,cAEhB,MAAM,GAAN,OAAUL,EAAV,YAAiBF,EAAjB,YAA8BI,EAA9B,YAAuCE,GAoCIE,CAAY,IAAIC,QAE3C,yBAAKhC,UAAU,eACX,yBAAKA,UAAU,QACViC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD7B,UAGA,yBAAKF,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,QAGhD,MCnDDkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.f569f868.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nconst api = {\r\n    key: \"51ae4a38fe34d265b6bc22203bc072a2\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nconst dateBuilder = (date) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\",\"May\",\"June\", \"July\",\r\n                \"August\", \"September\", \"October\", \"November\",\"December\"];\r\n    let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\r\n\r\n    let totalDate = date.getDate()\r\n    let day = days[date.getDay()]\r\n    let month = months[date.getMonth()]\r\n    let year = date.getFullYear()\r\n\r\n    return `${day} ${totalDate} ${month} ${year}`\r\n}\r\n\r\nfunction App() {\r\n    const [query, setQuery] = useState('')\r\n    const [weather, setWeather] = useState({})\r\n\r\n    const search = event => {\r\n        if (event.key === \"Enter\") {\r\n            fetch(`${api.base}weather?q=${query}&units=imperial&appid=${api.key}`)\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    setWeather(result)\r\n                    setQuery('')\r\n                    console.log(result)\r\n                })\r\n        }\r\n    }\r\n    return (\r\n        <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 50) ? 'app warm' : 'app')\r\n            : 'app'}>\r\n            <main>\r\n                <div className=\"search-box\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"search-bar\"\r\n                        placeholder=\"Search...\"\r\n                        onChange={e => setQuery(e.target.value)}\r\n                        value={query}\r\n                        onKeyPress={search}\r\n                    />\r\n                </div>\r\n                {(typeof weather.main != \"undefined\") ? (\r\n                <div>\r\n                    <div className=\"location-box\">\r\n                        <div className=\"location\">{weather.name}, {weather.sys.country}</div>\r\n                        <div className=\"date\">{dateBuilder(new Date())}</div>\r\n                    </div>\r\n                    <div className=\"weather-box\">\r\n                        <div className=\"temp\">\r\n                            {Math.round(weather.main.temp)}Â° F\r\n                        </div>\r\n                        <div className=\"weather\">{weather.weather[0].main}</div>\r\n                    </div>\r\n                </div>\r\n                ) : ('')}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}